!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR_compute	src/analysis/analysis.c	/^int	AR_compute( TYPE current_value, struct _interface_queue *queue_array, int if_index )$/;"	f	signature:( TYPE current_value, struct _interface_queue *queue_array, int if_index )
AR_compute	src/analysis/analysis.c	/^int	AR_compute( TYPE current_value, struct _interface_queue *queue_array, int if_index );$/;"	p	file:	signature:( TYPE current_value, struct _interface_queue *queue_array, int if_index )
BUFF_LEN	src/collect/raw_socket.c	6;"	d	file:
CR_VERSION	include/packet.h	23;"	d
DEBUG	include/public.h	/^        DEBUG,$/;"	e	enum:__anon1
DeQueue	include/queue.h	/^char    *DeQueue( MyQueue *p );$/;"	p	signature:( MyQueue *p )
DeQueue	src/util/queue.c	/^char	*DeQueue( MyQueue *p )$/;"	f	signature:( MyQueue *p )
ERR	include/public.h	/^        ERR,$/;"	e	enum:__anon1
ETH_LEN	include/public.h	38;"	d
FAIL	include/queue.h	4;"	d
FALSE	include/util.h	11;"	d
FLOW_IN	include/ip_list.h	106;"	d
FLOW_OUT	include/ip_list.h	107;"	d
GetQueueElem	include/queue.h	/^char	*GetQueueElem( MyQueue *p, int i );$/;"	p	signature:( MyQueue *p, int i )
GetQueueElem	src/util/queue.c	/^char	*GetQueueElem( MyQueue *p, int i )$/;"	f	signature:( MyQueue *p, int i )
GetQueueFront	include/queue.h	/^char	*GetQueueFront( MyQueue *p );$/;"	p	signature:( MyQueue *p )
GetQueueFront	src/util/queue.c	/^char	*GetQueueFront( MyQueue *p )$/;"	f	signature:( MyQueue *p )
GetQueueLast	include/queue.h	/^char	*GetQueueLast( MyQueue *p );$/;"	p	signature:( MyQueue *p )
GetQueueLast	src/util/queue.c	/^char	*GetQueueLast( MyQueue *p )$/;"	f	signature:( MyQueue *p )
GetQueueNum	include/queue.h	/^int GetQueueNum( MyQueue *p );$/;"	p	signature:( MyQueue *p )
GetQueueNum	src/util/queue.c	/^int GetQueueNum( MyQueue *p )$/;"	f	signature:( MyQueue *p )
INCLUDE	makefile	/^INCLUDE= -I$(MYDIR)\/include\/ -I\/usr\/include\/pcap -I\/usr\/include\/libxml2$/;"	m
INIT_LIST_HEAD	include/list.h	29;"	d
INTERVAL_TIME	include/interface.h	9;"	d
LIST_HEAD	include/list.h	26;"	d
LIST_HEAD_INIT	include/list.h	24;"	d
LOGFILE	include/public.h	58;"	d
LOG_LEVELS	include/public.h	/^} LOG_LEVELS;$/;"	t	typeref:enum:__anon1
MAX_BUFF_LEN	include/public.h	31;"	d
MAX_FLOW_NUM	include/interface.h	8;"	d
MAX_INTERFACE_SIZE	include/public.h	30;"	d
MYDIR	makefile	/^MYDIR=.$/;"	m
MYLIB	makefile	/^MYLIB=-L \/usr\/lib -lpcap -lxml2 -lpthread$/;"	m
MY_ERR	include/queue.h	7;"	d
MY_ERR_CALL	include/queue.h	9;"	d
MY_ERR_NO_INIT	include/queue.h	10;"	d
MY_ERR_NULL	include/queue.h	8;"	d
MY_ERR_Q_EMPTY	include/queue.h	12;"	d
MY_ERR_Q_FULL	include/queue.h	11;"	d
MY_SUCCESS	include/queue.h	6;"	d
MyQueue	include/queue.h	/^}MyQueue;$/;"	t	typeref:struct:_my_queue
NORM	include/public.h	/^        NORM,$/;"	e	enum:__anon1
NORMT	include/public.h	/^        NORMT,$/;"	e	enum:__anon1
OBJ1	makefile	/^OBJ1=$(MYDIR)\/src\/main.c  \\$/;"	m
PARAM_LEN	include/interface.h	56;"	d
PATH_PROC_NET_DEV	include/interface.h	68;"	d
QUEUENUM	include/public.h	65;"	d
QueueCreate	include/queue.h	/^MyQueue *QueueCreate( int typesize, int len );$/;"	p	signature:( int typesize, int len )
QueueCreate	src/util/queue.c	/^MyQueue *QueueCreate( int typesize, int len )$/;"	f	signature:( int typesize, int len )
QueueDestory	include/queue.h	/^int	QueueDestory( MyQueue *queue );$/;"	p	signature:( MyQueue *queue )
QueueDestory	src/util/queue.c	/^int	QueueDestory( MyQueue *queue )$/;"	f	signature:( MyQueue *queue )
SA	include/public.h	27;"	d
SA2IP	include/public.h	14;"	d
SA2PORT	include/public.h	23;"	d
SAIPLEN	include/public.h	21;"	d
SALEN	include/public.h	18;"	d
SCH_LINE_MAX	src/util/util.c	20;"	d	file:
SYS_LIST_LEN	include/public.h	29;"	d
TARGET1	makefile	/^TARGET1=traffic_control$/;"	m
TC_ERROR	include/public.h	35;"	d
TC_FAIL	include/public.h	34;"	d
TC_FLOW_INFO	include/packet.h	26;"	d
TC_INTERFACE_INFO	include/packet.h	25;"	d
TC_MONITOR_NO	include/packet.h	24;"	d
TC_SUCCESS	include/public.h	36;"	d
TC_TRUE	include/public.h	33;"	d
TRUE	include/queue.h	5;"	d
TRUE	include/util.h	10;"	d
TYPE	include/public.h	/^typedef int TYPE;$/;"	t
WARN	include/public.h	/^        WARN,$/;"	e	enum:__anon1
WriteLog	src/util/util.c	/^int     WriteLog( int level, char *cFormat, ... )$/;"	f	signature:( int level, char *cFormat, ... )
WriteLog	src/util/util.c	/^int     WriteLog( int level, char *cFormat, ... );$/;"	p	file:	signature:( int level, char *cFormat, ... )
WriteLog1	src/util/util.c	/^int     WriteLog1( char *filename, char *cFormat, ... )$/;"	f	signature:( char *filename, char *cFormat, ... )
WriteLog1	src/util/util.c	/^int     WriteLog1( char *filename, char *cFormat, ... );$/;"	p	file:	signature:( char *filename, char *cFormat, ... )
_ANALYSIS_H	include/analysis.h	2;"	d
_ANALYSIS_H	include/ip_list.h	2;"	d
_INTERFACE_H	include/interface.h	2;"	d
_LINUX_LIST_H	include/list.h	2;"	d
_MY_PTHREAD_H	include/my_pthread.h	2;"	d
_MY_QUEUE_	include/queue.h	2;"	d
_PACKET_H	include/packet.h	2;"	d
_PATH_PROCNET_IFINET6	include/interface.h	71;"	d
_PUBLIC_INCLUDE	include/public_include.h	2;"	d
_TC_PUBLIC_	include/public.h	2;"	d
_UTIL_H	include/util.h	2;"	d
__KERNEL__	include/list.h	5;"	d
__list_add	include/list.h	/^static void __list_add(struct list_head * new,$/;"	f	signature:(struct list_head * new, struct list_head * prev, struct list_head * next)
__list_del	include/list.h	/^static void __list_del(struct list_head * prev,$/;"	f	signature:(struct list_head * prev, struct list_head * next)
__u16	include/public.h	/^typedef unsigned short __u16;$/;"	t
__u32	include/public.h	/^typedef unsigned int __u32;$/;"	t
__u8	include/public.h	/^typedef unsigned char __u8;$/;"	t
_cpi_header	include/packet.h	/^struct _cpi_header$/;"	s
_cpi_header::device_type	include/packet.h	/^	__u16 device_type;$/;"	m	struct:_cpi_header	access:public
_cpi_header::padding	include/packet.h	/^	__u32 padding;$/;"	m	struct:_cpi_header	access:public
_cpi_header::padding1	include/packet.h	/^	__u32 padding1;$/;"	m	struct:_cpi_header	access:public
_cpi_header::padding2	include/packet.h	/^	__u32 padding2;$/;"	m	struct:_cpi_header	access:public
_cpi_header::pkg_len	include/packet.h	/^	__u32 pkg_len;$/;"	m	struct:_cpi_header	access:public
_cpi_header::pkg_type	include/packet.h	/^	__u8 pkg_type;$/;"	m	struct:_cpi_header	access:public
_cpi_header::pkg_version	include/packet.h	/^	__u8 pkg_version;$/;"	m	struct:_cpi_header	access:public
_element_struct	include/interface.h	/^struct _element_struct$/;"	s
_element_struct::length	include/interface.h	/^	int	length;		\/\/队列当前长度$/;"	m	struct:_element_struct	access:public
_element_struct::maxsize	include/interface.h	/^	int	maxsize;	\/\/队列最大长度$/;"	m	struct:_element_struct	access:public
_element_struct::node	include/interface.h	/^	struct _ipv4_struct node[MAX_FLOW_NUM];$/;"	m	struct:_element_struct	typeref:struct:_element_struct::_ipv4_struct	access:public
_element_struct::tail	include/interface.h	/^	int	tail;		\/\/队列尾$/;"	m	struct:_element_struct	access:public
_interface_info	include/interface.h	/^struct _interface_info$/;"	s
_interface_info::active	include/interface.h	/^	int     active;		\/\/1:active; !1: not active$/;"	m	struct:_interface_info	access:public
_interface_info::device_stats	include/interface.h	/^	struct net_device_stats device_stats;	\/\/设备信息$/;"	m	struct:_interface_info	typeref:struct:_interface_info::net_device_stats	access:public
_interface_info::ether_host	include/interface.h	/^	u_int8_t  ether_host[ETH_LEN+1];$/;"	m	struct:_interface_info	access:public
_interface_info::if_index	include/interface.h	/^	int	if_index;$/;"	m	struct:_interface_info	access:public
_interface_info::ipv4_addr	include/interface.h	/^	char    ipv4_addr[INET6_ADDRSTRLEN];$/;"	m	struct:_interface_info	access:public
_interface_info::ipv4_broad_addr	include/interface.h	/^	char    ipv4_broad_addr[INET6_ADDRSTRLEN];$/;"	m	struct:_interface_info	access:public
_interface_info::ipv4_netmask	include/interface.h	/^	char    ipv4_netmask[INET6_ADDRSTRLEN];	$/;"	m	struct:_interface_info	access:public
_interface_info::ipv6_addr	include/interface.h	/^	char    ipv6_addr[512];$/;"	m	struct:_interface_info	access:public
_interface_info::ipv6_addr_netmask	include/interface.h	/^	int    ipv6_addr_netmask;$/;"	m	struct:_interface_info	access:public
_interface_info::name	include/interface.h	/^	char    name[50];$/;"	m	struct:_interface_info	access:public
_interface_info::rx_bytes	include/interface.h	/^	unsigned long rx_bytes;$/;"	m	struct:_interface_info	access:public
_interface_info::tx_bytes	include/interface.h	/^	unsigned long tx_bytes;$/;"	m	struct:_interface_info	access:public
_interface_queue	include/interface.h	/^struct _interface_queue$/;"	s
_interface_queue::queue	include/interface.h	/^	MyQueue	*queue;$/;"	m	struct:_interface_queue	access:public
_interface_queue::sum_x	include/interface.h	/^	TYPE	sum_x;$/;"	m	struct:_interface_queue	access:public
_interface_queue::sum_y	include/interface.h	/^	TYPE	sum_y;$/;"	m	struct:_interface_queue	access:public
_interface_sampled_param	include/interface.h	/^struct _interface_sampled_param$/;"	s
_interface_sampled_param::sys_sampled_param	include/interface.h	/^	struct _sys_sampled_param	sys_sampled_param[PARAM_LEN];$/;"	m	struct:_interface_sampled_param	typeref:struct:_interface_sampled_param::_sys_sampled_param	access:public
_interface_struct	include/interface.h	/^struct _interface_struct$/;"	s
_interface_struct::active	include/interface.h	/^	int     active;				\/\/网卡状态$/;"	m	struct:_interface_struct	access:public
_interface_struct::address	include/interface.h	/^	char    address[50];		\/\/网卡地址$/;"	m	struct:_interface_struct	access:public
_interface_struct::device_stats	include/interface.h	/^	struct net_device_stats device_stats;	\/\/设备信息$/;"	m	struct:_interface_struct	typeref:struct:_interface_struct::net_device_stats	access:public
_interface_struct::element	include/interface.h	/^	struct _element_struct element;		\/\/$/;"	m	struct:_interface_struct	typeref:struct:_interface_struct::_element_struct	access:public
_interface_struct::ether_host	include/interface.h	/^	u_int8_t  ether_host[ETH_LEN+1];	\/\/MAC地址$/;"	m	struct:_interface_struct	access:public
_interface_struct::ifindex	include/interface.h	/^	int	ifindex;$/;"	m	struct:_interface_struct	access:public
_interface_struct::interval	include/interface.h	/^	int	interval;			\/\/间隔时间$/;"	m	struct:_interface_struct	access:public
_interface_struct::name	include/interface.h	/^	char    name[50];		\/\/网卡名称$/;"	m	struct:_interface_struct	access:public
_ip_func	include/ip_list.h	/^struct _ip_func$/;"	s
_ip_func::add	include/ip_list.h	/^	int	(*add)( char *flow, int if_index );$/;"	m	struct:_ip_func	access:public
_ip_func::ip_v	include/ip_list.h	/^	unsigned int	ip_v;$/;"	m	struct:_ip_func	access:public
_ip_func::operate	include/ip_list.h	/^	char *(*operate)( const u_char *packet, int if_index );$/;"	m	struct:_ip_func	access:public
_ip_func::print_data	include/ip_list.h	/^	int (*print_data)( const char *flow );$/;"	m	struct:_ip_func	access:public
_ip_func::search	include/ip_list.h	/^	struct list_head*	(*search)( char *flow, int if_index );$/;"	m	struct:_ip_func	typeref:struct:_ip_func::search	access:public
_ip_func::update	include/ip_list.h	/^	int	(*update)( struct list_head *p, char *flow );$/;"	m	struct:_ip_func	access:public
_ipv4_flow	include/ip_list.h	/^struct _ipv4_flow$/;"	s
_ipv4_flow::dscp	include/ip_list.h	/^	__u8 dscp;$/;"	m	struct:_ipv4_flow	access:public
_ipv4_flow::ether_dhost	include/ip_list.h	/^	u_int8_t  ether_dhost[ETH_LEN+1];      \/* destination eth addr *\/$/;"	m	struct:_ipv4_flow	access:public
_ipv4_flow::ether_shost	include/ip_list.h	/^	u_int8_t  ether_shost[ETH_LEN+1];      \/* source ether addr    *\/	$/;"	m	struct:_ipv4_flow	access:public
_ipv4_flow::flow_direction	include/ip_list.h	/^	__u32	flow_direction:1;		\/* flow direction 0:input;1:output*\/$/;"	m	struct:_ipv4_flow	access:public
_ipv4_flow::if_in	include/ip_list.h	/^	__u32	if_in;				\/* which interface receive the flow *\/$/;"	m	struct:_ipv4_flow	access:public
_ipv4_flow::if_out	include/ip_list.h	/^	__u32	if_out;				\/* which interface send the flow *\/$/;"	m	struct:_ipv4_flow	access:public
_ipv4_flow::ip_dst	include/ip_list.h	/^	struct in_addr ip_dst;$/;"	m	struct:_ipv4_flow	typeref:struct:_ipv4_flow::in_addr	access:public
_ipv4_flow::ip_src	include/ip_list.h	/^	struct in_addr ip_src;	$/;"	m	struct:_ipv4_flow	typeref:struct:_ipv4_flow::in_addr	access:public
_ipv4_flow::port_dst	include/ip_list.h	/^	__u16 port_dst;$/;"	m	struct:_ipv4_flow	access:public
_ipv4_flow::port_src	include/ip_list.h	/^	__u16 port_src;$/;"	m	struct:_ipv4_flow	access:public
_ipv4_flow::total_send	include/ip_list.h	/^	__u32	total_send;$/;"	m	struct:_ipv4_flow	access:public
_ipv4_struct	include/ip_list.h	/^struct	_ipv4_struct$/;"	s
_ipv4_struct::end	include/ip_list.h	/^	struct timeval end;$/;"	m	struct:_ipv4_struct	typeref:struct:_ipv4_struct::timeval	access:public
_ipv4_struct::flow	include/ip_list.h	/^	struct _ipv4_flow flow;$/;"	m	struct:_ipv4_struct	typeref:struct:_ipv4_struct::_ipv4_flow	access:public
_ipv4_struct::ip_v	include/ip_list.h	/^	__u32	ip_v:4;$/;"	m	struct:_ipv4_struct	access:public
_ipv4_struct::node	include/ip_list.h	/^	struct list_head	node;$/;"	m	struct:_ipv4_struct	typeref:struct:_ipv4_struct::list_head	access:public
_ipv4_struct::start	include/ip_list.h	/^	struct timeval start;$/;"	m	struct:_ipv4_struct	typeref:struct:_ipv4_struct::timeval	access:public
_ipv4_struct::used	include/ip_list.h	/^	__u32	used:1;$/;"	m	struct:_ipv4_struct	access:public
_ipv6_flow	include/ip_list.h	/^struct _ipv6_flow$/;"	s
_ipv6_flow::ether_dhost	include/ip_list.h	/^	u_int8_t  ether_dhost[ETH_LEN];      \/* destination eth addr *\/$/;"	m	struct:_ipv6_flow	access:public
_ipv6_flow::ether_shost	include/ip_list.h	/^	u_int8_t  ether_shost[ETH_LEN];      \/* source ether addr    *\/	$/;"	m	struct:_ipv6_flow	access:public
_ipv6_flow::ip6_dst	include/ip_list.h	/^	struct in6_addr ip6_dst;$/;"	m	struct:_ipv6_flow	typeref:struct:_ipv6_flow::in6_addr	access:public
_ipv6_flow::ip6_src	include/ip_list.h	/^	struct in6_addr ip6_src;$/;"	m	struct:_ipv6_flow	typeref:struct:_ipv6_flow::in6_addr	access:public
_ipv6_flow::total_send	include/ip_list.h	/^	__u32	total_send;$/;"	m	struct:_ipv6_flow	access:public
_ipv6_struct	include/ip_list.h	/^struct	_ipv6_struct$/;"	s
_ipv6_struct::flow	include/ip_list.h	/^	struct _ipv6_flow flow;$/;"	m	struct:_ipv6_struct	typeref:struct:_ipv6_struct::_ipv6_flow	access:public
_ipv6_struct::ip_v	include/ip_list.h	/^	__u32	ip_v:4;$/;"	m	struct:_ipv6_struct	access:public
_ipv6_struct::node	include/ip_list.h	/^	struct list_head	node;$/;"	m	struct:_ipv6_struct	typeref:struct:_ipv6_struct::list_head	access:public
_ipv6_struct::used	include/ip_list.h	/^	__u32	used:1;$/;"	m	struct:_ipv6_struct	access:public
_my_queue	include/queue.h	/^typedef struct _my_queue$/;"	s
_my_queue::front	include/queue.h	/^	int	front;		\/\/队列头 - front实际上存放的是字符数组的下标$/;"	m	struct:_my_queue	access:public
_my_queue::length	include/queue.h	/^	int	length;		\/\/当前队列长度$/;"	m	struct:_my_queue	access:public
_my_queue::maxsize	include/queue.h	/^	int	maxsize;	\/\/循环队列最大长度$/;"	m	struct:_my_queue	access:public
_my_queue::mutex	include/queue.h	/^	pthread_mutex_t	mutex;$/;"	m	struct:_my_queue	access:public
_my_queue::queue	include/queue.h	/^	char	*queue;		\/\/队列存储空间$/;"	m	struct:_my_queue	access:public
_my_queue::rear	include/queue.h	/^	int	rear;		\/\/队列尾 - rear实际上存放的是字符数组的下标$/;"	m	struct:_my_queue	access:public
_my_queue::typesize	include/queue.h	/^	int	typesize;	\/\/某种数据类型长度$/;"	m	struct:_my_queue	access:public
_sampled_struct	include/interface.h	/^struct _sampled_struct$/;"	s
_sampled_struct::captured_time	include/interface.h	/^	int	captured_time;		\/\/捕获时间$/;"	m	struct:_sampled_struct	access:public
_sampled_struct::interval_time	include/interface.h	/^	int	interval_time;		\/\/间隔时间$/;"	m	struct:_sampled_struct	access:public
_sampled_struct::out_sampled_rate	include/interface.h	/^	float	out_sampled_rate;	\/\/抽样率$/;"	m	struct:_sampled_struct	access:public
_sampled_struct::sampled_index	include/interface.h	/^	int	sampled_index;		\/\/对应抽样参数数组中的数组下标$/;"	m	struct:_sampled_struct	access:public
_sampled_struct::sampled_packets	include/interface.h	/^	int	sampled_packets;	\/\/抽样时间内抽样的包个数$/;"	m	struct:_sampled_struct	access:public
_sampled_struct::total_packets	include/interface.h	/^	int	total_packets;		\/\/抽样时间内总的包个数$/;"	m	struct:_sampled_struct	access:public
_sampled_struct::total_send_rate	include/interface.h	/^	int	total_send_rate;	\/\/总的发送速率$/;"	m	struct:_sampled_struct	access:public
_sys_sampled_param	include/interface.h	/^struct _sys_sampled_param$/;"	s
_sys_sampled_param::interval_time	include/interface.h	/^	int	interval_time;$/;"	m	struct:_sys_sampled_param	access:public
_sys_sampled_param::out_sampled_rate	include/interface.h	/^	int	out_sampled_rate;$/;"	m	struct:_sys_sampled_param	access:public
_tc_config_struct	include/public.h	/^struct _tc_config_struct$/;"	s
_tc_config_struct::a	include/public.h	/^	double			a;$/;"	m	struct:_tc_config_struct	access:public
_tc_config_struct::captured_time	include/public.h	/^	int			captured_time;$/;"	m	struct:_tc_config_struct	access:public
_tc_config_struct::fp	include/public.h	/^	FILE			*fp ;$/;"	m	struct:_tc_config_struct	access:public
_tc_config_struct::interval	include/public.h	/^	int			interval;$/;"	m	struct:_tc_config_struct	access:public
_tc_config_struct::nmax	include/public.h	/^	int			nmax;$/;"	m	struct:_tc_config_struct	access:public
_tc_config_struct::p	include/public.h	/^	double			p;$/;"	m	struct:_tc_config_struct	access:public
_tc_config_struct::pma_addr	include/public.h	/^	struct sockaddr_storage	pma_addr;$/;"	m	struct:_tc_config_struct	typeref:struct:_tc_config_struct::sockaddr_storage	access:public
_tc_config_struct::pma_port	include/public.h	/^	int			pma_port;	$/;"	m	struct:_tc_config_struct	access:public
_tc_config_struct::router_id	include/public.h	/^	int			router_id;$/;"	m	struct:_tc_config_struct	access:public
_tc_sys_list	include/ip_list.h	/^struct _tc_sys_list$/;"	s
_tc_sys_list::node_head	include/ip_list.h	/^	struct list_head	node_head;	\/\/list head position$/;"	m	struct:_tc_sys_list	typeref:struct:_tc_sys_list::list_head	access:public
a	include/public.h	/^	double			a;$/;"	m	struct:_tc_config_struct	access:public
active	include/interface.h	/^	int     active;				\/\/网卡状态$/;"	m	struct:_interface_struct	access:public
active	include/interface.h	/^	int     active;		\/\/1:active; !1: not active$/;"	m	struct:_interface_info	access:public
add	include/ip_list.h	/^	int	(*add)( char *flow, int if_index );$/;"	m	struct:_ip_func	access:public
add_xml_child	src/xml/xml.c	/^xmlNodePtr add_xml_child( xmlNodePtr node, char *name, char *value )$/;"	f	signature:( xmlNodePtr node, char *name, char *value )
add_xml_child	src/xml/xml.c	/^xmlNodePtr add_xml_child( xmlNodePtr node, char *name, char *value );$/;"	p	file:	signature:( xmlNodePtr node, char *name, char *value )
add_xml_child_prop	src/xml/xml.c	/^int add_xml_child_prop( xmlNodePtr node, char *name, char *value )$/;"	f	signature:( xmlNodePtr node, char *name, char *value )
addr_to_str	src/util/util.c	/^int addr_to_str(struct sockaddr *addr, __u8 *data, int len)$/;"	f	signature:(struct sockaddr *addr, __u8 *data, int len)
address	include/interface.h	/^	char    address[50];		\/\/网卡地址$/;"	m	struct:_interface_struct	access:public
analysis_module	include/analysis.h	/^int     analysis_module( const u_char *packet_content );$/;"	p	signature:( const u_char *packet_content )
analysis_module	src/analysis/analysis.c	/^int	analysis_module( const u_char *packet_content, int if_index )$/;"	f	signature:( const u_char *packet_content, int if_index )
bind_rawsocket_to_interface	src/collect/raw_socket.c	/^int	bind_rawsocket_to_interface( char *device, int rawsock, int protocol )$/;"	f	signature:( char *device, int rawsock, int protocol )
cal_flow_in_out_interface	src/analysis/statistics.c	/^int cal_flow_in_out_interface( char *flow, int out_if_index )$/;"	f	signature:( char *flow, int out_if_index )
cal_interface_sampled_rate	src/analysis/analysis.c	/^int	cal_interface_sampled_rate( int if_index )$/;"	f	signature:( int if_index )
cal_interface_sampled_rate	src/analysis/analysis.c	/^int	cal_interface_sampled_rate( int if_index );$/;"	p	file:	signature:( int if_index )
capture_netlink_data	src/collect/raw_socket.c	/^void *capture_netlink_data( char *device, int captured_time, int if_index )$/;"	f	signature:( char *device, int captured_time, int if_index )
capture_netlink_data	src/collect/raw_socket.c	/^void *capture_netlink_data( char *device, int captured_time, int if_index );$/;"	p	file:	signature:( char *device, int captured_time, int if_index )
captured_time	include/interface.h	/^	int	captured_time;		\/\/捕获时间$/;"	m	struct:_sampled_struct	access:public
captured_time	include/public.h	/^	int			captured_time;$/;"	m	struct:_tc_config_struct	access:public
client_send	src/comm/comm.c	/^int	client_send( __u8 *data, int len, struct sockaddr* dst )$/;"	f	signature:( __u8 *data, int len, struct sockaddr* dst )
close_interface_pcap_fp	src/init/init_module.c	/^void	close_interface_pcap_fp()$/;"	f
collect_information	src/collect/get_ethernet2_code.c	/^void collect_information( int if_index )$/;"	f	signature:( int if_index )
collect_traffic_info_func	src/main.c	/^void	*collect_traffic_info_func( void *arg )$/;"	f	signature:( void *arg )
collect_traffic_info_func	src/main.c	/^void	*collect_traffic_info_func( void *arg );$/;"	p	file:	signature:( void *arg )
cond	include/my_pthread.h	/^pthread_cond_t cond;$/;"	v
cond	include/public.h	/^pthread_cond_t cond;$/;"	v
cond_pro	include/my_pthread.h	/^pthread_cond_t cond_pro;$/;"	v
cond_pro	include/public.h	/^pthread_cond_t cond_pro;$/;"	v
consumer_notify_producer	include/my_pthread.h	/^void    consumer_notify_producer();$/;"	p	signature:()
consumer_notify_producer	src/pthread/pthread_cond_wait.c	/^void	consumer_notify_producer()$/;"	f
consumer_wait	include/my_pthread.h	/^void    consumer_wait( int num );$/;"	p	signature:( int num )
consumer_wait	src/pthread/pthread_cond_wait.c	/^void	consumer_wait( int num )$/;"	f	signature:( int num )
create_raw_socket	src/collect/raw_socket.c	/^int	create_raw_socket( int protocol )$/;"	f	signature:( int protocol )
create_xml_doc	src/xml/xml.c	/^xmlDocPtr create_xml_doc()$/;"	f
create_xml_doc	src/xml/xml.c	/^xmlDocPtr create_xml_doc();$/;"	p	file:
create_xml_root_node	src/xml/xml.c	/^xmlNodePtr create_xml_root_node( xmlDocPtr doc, char *name )$/;"	f	signature:( xmlDocPtr doc, char *name )
create_xml_root_node	src/xml/xml.c	/^xmlNodePtr create_xml_root_node( xmlDocPtr doc, char *name );$/;"	p	file:	signature:( xmlDocPtr doc, char *name )
decide_sample_or_not	src/analysis/analysis.c	/^int	decide_sample_or_not( int out_sampled_rate )$/;"	f	signature:( int out_sampled_rate )
decide_sample_or_not	src/analysis/analysis.c	/^int	decide_sample_or_not( int out_sampled_rate );$/;"	p	file:	signature:( int out_sampled_rate )
decide_sampled_packets	src/analysis/analysis.c	/^static int decide_sampled_packets( int if_index )$/;"	f	file:	signature:( int if_index )
decide_sampled_packets	src/analysis/analysis.c	/^static int decide_sampled_packets( int if_index );$/;"	p	file:	signature:( int if_index )
device_stats	include/interface.h	/^	struct net_device_stats device_stats;	\/\/设备信息$/;"	m	struct:_interface_info	typeref:struct:_interface_info::net_device_stats	access:public
device_stats	include/interface.h	/^	struct net_device_stats device_stats;	\/\/设备信息$/;"	m	struct:_interface_struct	typeref:struct:_interface_struct::net_device_stats	access:public
device_type	include/packet.h	/^	__u16 device_type;$/;"	m	struct:_cpi_header	access:public
dscp	include/ip_list.h	/^	__u8 dscp;$/;"	m	struct:_ipv4_flow	access:public
element	include/interface.h	/^	struct _element_struct element;		\/\/$/;"	m	struct:_interface_struct	typeref:struct:_interface_struct::_element_struct	access:public
enQueue	include/queue.h	/^int     enQueue( MyQueue *p, char *element );$/;"	p	signature:( MyQueue *p, char *element )
enQueue	src/util/queue.c	/^int	enQueue( MyQueue *p, char *element )$/;"	f	signature:( MyQueue *p, char *element )
end	include/ip_list.h	/^	struct timeval end;$/;"	m	struct:_ipv4_struct	typeref:struct:_ipv4_struct::timeval	access:public
ether_dhost	include/ip_list.h	/^	u_int8_t  ether_dhost[ETH_LEN+1];      \/* destination eth addr *\/$/;"	m	struct:_ipv4_flow	access:public
ether_dhost	include/ip_list.h	/^	u_int8_t  ether_dhost[ETH_LEN];      \/* destination eth addr *\/$/;"	m	struct:_ipv6_flow	access:public
ether_dhost	include/packet.h	/^    u_int8_t ether_dhost[6];$/;"	m	struct:this_ether_header	access:public
ether_host	include/interface.h	/^	u_int8_t  ether_host[ETH_LEN+1];	\/\/MAC地址$/;"	m	struct:_interface_struct	access:public
ether_host	include/interface.h	/^	u_int8_t  ether_host[ETH_LEN+1];$/;"	m	struct:_interface_info	access:public
ether_shost	include/ip_list.h	/^	u_int8_t  ether_shost[ETH_LEN+1];      \/* source ether addr    *\/	$/;"	m	struct:_ipv4_flow	access:public
ether_shost	include/ip_list.h	/^	u_int8_t  ether_shost[ETH_LEN];      \/* source ether addr    *\/	$/;"	m	struct:_ipv6_flow	access:public
ether_shost	include/packet.h	/^    u_int8_t ether_shost[6];$/;"	m	struct:this_ether_header	access:public
ether_type	include/packet.h	/^    u_int16_t ether_type;$/;"	m	struct:this_ether_header	access:public
ethernet_protocol_packet_callback	src/collect/get_ethernet2_code.c	/^void	ethernet_protocol_packet_callback( u_char *argument, const struct pcap_pkthdr *packet_header, const u_char *packet_content, int if_index )$/;"	f	signature:( u_char *argument, const struct pcap_pkthdr *packet_header, const u_char *packet_content, int if_index )
flow	include/ip_list.h	/^	struct _ipv4_flow flow;$/;"	m	struct:_ipv4_struct	typeref:struct:_ipv4_struct::_ipv4_flow	access:public
flow	include/ip_list.h	/^	struct _ipv6_flow flow;$/;"	m	struct:_ipv6_struct	typeref:struct:_ipv6_struct::_ipv6_flow	access:public
flow_direction	include/ip_list.h	/^	__u32	flow_direction:1;		\/* flow direction 0:input;1:output*\/$/;"	m	struct:_ipv4_flow	access:public
flow_operation	include/ip_list.h	/^struct _ip_func	flow_operation[2];$/;"	v	typeref:struct:_ip_func
fp	include/public.h	/^	FILE			*fp ;$/;"	m	struct:_tc_config_struct	access:public
free_module	src/destory/destory.c	/^void	free_module()$/;"	f
front	include/queue.h	/^	int	front;		\/\/队列头 - front实际上存放的是字符数组的下标$/;"	m	struct:_my_queue	access:public
g_host_config	include/public.h	/^struct _tc_config_struct g_host_config;$/;"	v	typeref:struct:_tc_config_struct
g_interface_size	include/public.h	/^int	g_interface_size;$/;"	v
g_this_interface_size	src/main.c	/^int	g_this_interface_size;$/;"	v
get_all_interfaces	src/util/interface.c	/^int	get_all_interfaces( struct _interface_info *if_array, int *size )$/;"	f	signature:( struct _interface_info *if_array, int *size )
get_all_interfaces_info	include/util.h	/^int get_all_interfaces_info( int s_net, int nl_sequence_number, struct _interface_struct *if_array );$/;"	p	signature:( int s_net, int nl_sequence_number, struct _interface_struct *if_array )
get_all_interfaces_info	src/util/util.c	/^int	get_all_interfaces_info( int s_net, int nl_sequence_number, struct _interface_struct *if_array )$/;"	f	signature:( int s_net, int nl_sequence_number, struct _interface_struct *if_array )
get_best_sampled_count	src/init/init_module.c	/^void	get_best_sampled_count()$/;"	f
get_best_sampled_count	src/init/init_module.c	/^void	get_best_sampled_count();$/;"	p	file:
get_data_time	src/util/util.c	/^void    get_data_time( char *timestamp, int len )$/;"	f	signature:( char *timestamp, int len )
get_dev_fields	src/util/interface.c	/^static int get_dev_fields(char *bp, struct _interface_info *ife)$/;"	f	file:	signature:(char *bp, struct _interface_info *ife)
get_dev_flag	src/util/interface.c	/^int	get_dev_flag( int skfd, struct _interface_info *ife )$/;"	f	signature:( int skfd, struct _interface_info *ife )
get_dev_flow_info	src/util/interface.c	/^int	get_dev_flow_info( struct _interface_info *ife, int num ) $/;"	f	signature:( struct _interface_info *ife, int num )
get_dev_hwaddr	src/util/interface.c	/^int	get_dev_hwaddr( int skfd, struct _interface_info *ife )$/;"	f	signature:( int skfd, struct _interface_info *ife )
get_dev_index	src/util/interface.c	/^int	get_dev_index( int skfd, struct _interface_info *ife )$/;"	f	signature:( int skfd, struct _interface_info *ife )
get_dev_info	src/util/interface.c	/^int	get_dev_info( int s_net, int nl_sequence_number, struct _interface_info *if_array )$/;"	f	signature:( int s_net, int nl_sequence_number, struct _interface_info *if_array )
get_dev_ipv4_addr	src/util/interface.c	/^int	get_dev_ipv4_addr( int skfd, struct _interface_info *ife )$/;"	f	signature:( int skfd, struct _interface_info *ife )
get_dev_ipv4_broadaddr	src/util/interface.c	/^int	get_dev_ipv4_broadaddr( int skfd, struct _interface_info *ife )$/;"	f	signature:( int skfd, struct _interface_info *ife )
get_dev_ipv4_netmask	src/util/interface.c	/^int	get_dev_ipv4_netmask( int skfd, struct _interface_info *ife )$/;"	f	signature:( int skfd, struct _interface_info *ife )
get_dev_ipv6_addr	src/util/interface.c	/^int	get_dev_ipv6_addr( struct _interface_info *ife )$/;"	f	signature:( struct _interface_info *ife )
get_device_stats	src/util/util.c	/^int	get_device_stats( struct net_device_stats *net_stats, int ifindex );$/;"	p	file:	signature:( struct net_device_stats *net_stats, int ifindex )
get_device_stats	src/util/util.c	/^int get_device_stats( struct net_device_stats *net_stats, int ifindex )$/;"	f	signature:( struct net_device_stats *net_stats, int ifindex )
get_diff_time	include/util.h	/^int get_diff_time( struct timeval *start, struct timeval *end );$/;"	p	signature:( struct timeval *start, struct timeval *end )
get_diff_time	src/util/util.c	/^int	get_diff_time( struct timeval *start, struct timeval *end )	$/;"	f	signature:( struct timeval *start, struct timeval *end )
get_interface_flow_info	src/collect/get_ethernet2_code.c	/^static void	get_interface_flow_info( int if_index )$/;"	f	file:	signature:( int if_index )
get_interfaces_info	src/util/interface.c	/^int	get_interfaces_info( int interface_size, struct _interface_info *ife )$/;"	f	signature:( int interface_size, struct _interface_info *ife )
get_interval_time	src/analysis/analysis.c	/^int	get_interval_time( int if_index )$/;"	f	signature:( int if_index )
get_interval_time	src/analysis/analysis.c	/^int	get_interval_time( int if_index );$/;"	p	file:	signature:( int if_index )
get_n	src/init/init_module.c	/^int	get_n( double  zp, double p0 )$/;"	f	signature:( double zp, double p0 )
get_n	src/init/init_module.c	/^int	get_n( double  zp, double p0 );$/;"	p	file:	signature:( double zp, double p0 )
get_name	src/util/interface.c	/^static char *get_name(char *name, char *p)$/;"	f	file:	signature:(char *name, char *p)
get_name	src/util/interface.c	/^static char *get_name(char *name, char *p);$/;"	p	file:	signature:(char *name, char *p)
get_one_interface_info	src/util/interface.c	/^int	get_one_interface_info( struct _interface_info *ife )$/;"	f	signature:( struct _interface_info *ife )
get_operation_func	src/init/init_module.c	/^struct _ip_func *get_operation_func( unsigned int ip_v )$/;"	f	signature:( unsigned int ip_v )
get_operation_func	src/init/init_module.c	/^struct _ip_func *get_operation_func( unsigned int ip_v );$/;"	p	file:	signature:( unsigned int ip_v )
get_pma_addr	src/comm/comm.c	/^struct sockaddr *get_pma_addr();$/;"	p	file:
get_pma_addr	src/util/util.c	/^struct sockaddr	*get_pma_addr()$/;"	f
get_pma_port	src/util/util.c	/^int	get_pma_port()$/;"	f
get_router_id	src/util/util.c	/^int	get_router_id()$/;"	f
get_sampled_index	src/analysis/analysis.c	/^int	get_sampled_index( float out_sampled_rate, int if_index )$/;"	f	signature:( float out_sampled_rate, int if_index )
get_sampled_index	src/analysis/analysis.c	/^int	get_sampled_index( float out_sampled_rate, int if_index );$/;"	p	file:	signature:( float out_sampled_rate, int if_index )
get_sampled_interval_time	src/analysis/analysis.c	/^int	get_sampled_interval_time( int sampled_index, int if_index )$/;"	f	signature:( int sampled_index, int if_index )
get_sampled_interval_time	src/analysis/analysis.c	/^int	get_sampled_interval_time( int sampled_index, int if_index );$/;"	p	file:	signature:( int sampled_index, int if_index )
get_sampled_rate	src/analysis/analysis.c	/^int	get_sampled_rate( int sampled_index, int if_index )$/;"	f	signature:( int sampled_index, int if_index )
get_sampled_rate	src/analysis/analysis.c	/^int	get_sampled_rate( int sampled_index, int if_index );$/;"	p	file:	signature:( int sampled_index, int if_index )
get_system_memory	src/init/init_module.c	/^struct _ipv4_struct *get_system_memory( int ifindex )$/;"	f	signature:( int ifindex )
get_system_memory	src/init/init_module.c	/^struct _ipv4_struct *get_system_memory( int ifindex );$/;"	p	file:	signature:( int ifindex )
get_zp	src/init/init_module.c	/^double get_zp()$/;"	f
get_zp	src/init/init_module.c	/^double get_zp();$/;"	p	file:
gettime	src/util/util.c	/^void	gettime(char *cur_date, char *cur_time)$/;"	f	signature:(char *cur_date, char *cur_time)
gettime	src/util/util.c	/^void	gettime(char *cur_date, char *cur_time);$/;"	p	file:	signature:(char *cur_date, char *cur_time)
if_array	include/interface.h	/^struct _interface_struct	if_array[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_interface_struct
if_in	include/ip_list.h	/^	__u32	if_in;				\/* which interface receive the flow *\/$/;"	m	struct:_ipv4_flow	access:public
if_index	include/interface.h	/^	int	if_index;$/;"	m	struct:_interface_info	access:public
if_out	include/ip_list.h	/^	__u32	if_out;				\/* which interface send the flow *\/$/;"	m	struct:_ipv4_flow	access:public
if_readlist_proc	src/util/interface.c	/^static int if_readlist_proc( struct _interface_info *ife )$/;"	f	file:	signature:( struct _interface_info *ife )
if_readlist_proc	src/util/interface.c	/^static int if_readlist_proc( struct _interface_info *ife );$/;"	p	file:	signature:( struct _interface_info *ife )
if_sampled_array	include/interface.h	/^struct _interface_sampled_param	if_sampled_array[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_interface_sampled_param
ife	include/interface.h	/^struct _interface_info	ife[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_interface_info
ifindex	include/interface.h	/^	int	ifindex;$/;"	m	struct:_interface_struct	access:public
init_flow_operation	src/init/init_module.c	/^static int	init_flow_operation()$/;"	f	file:
init_flow_operation	src/init/init_module.c	/^static int	init_flow_operation();$/;"	p	file:
init_if_array	src/init/init_module.c	/^static void init_if_array( struct _interface_struct *if_array, int if_num, int max_num )$/;"	f	file:	signature:( struct _interface_struct *if_array, int if_num, int max_num )
init_if_array	src/init/init_module.c	/^static void init_if_array( struct _interface_struct *if_array, int if_num, int max_num );$/;"	p	file:	signature:( struct _interface_struct *if_array, int if_num, int max_num )
init_interface_sampled_param	src/init/init_module.c	/^static void init_interface_sampled_param( struct _interface_sampled_param *if_sampled_array, int interface_num )$/;"	f	file:	signature:( struct _interface_sampled_param *if_sampled_array, int interface_num )
init_interface_sampled_param	src/init/init_module.c	/^static void init_interface_sampled_param( struct _interface_sampled_param *if_sampled_array, int interface_num );$/;"	p	file:	signature:( struct _interface_sampled_param *if_sampled_array, int interface_num )
init_interface_sampled_struct	src/init/init_module.c	/^static void init_interface_sampled_struct( struct _sampled_struct *sampled_struct, int if_num )$/;"	f	file:	signature:( struct _sampled_struct *sampled_struct, int if_num )
init_interface_sampled_struct	src/init/init_module.c	/^static void init_interface_sampled_struct( struct _sampled_struct *sampled_struct, int if_num );$/;"	p	file:	signature:( struct _sampled_struct *sampled_struct, int if_num )
init_list	include/util.h	/^void    init_list( struct _tc_sys_list *list );$/;"	p	signature:( struct _tc_sys_list *list )
init_list	src/util/util.c	/^void	init_list( struct _tc_sys_list *list )$/;"	f	signature:( struct _tc_sys_list *list )
init_module	src/init/init_module.c	/^void	init_module()$/;"	f
init_one_pcap_fp	src/init/init_module.c	/^static void init_one_pcap_fp( int if_index )$/;"	f	file:	signature:( int if_index )
init_one_pcap_fp	src/init/init_module.c	/^static void init_one_pcap_fp( int if_index );$/;"	p	file:	signature:( int if_index )
init_pcap_fp	src/init/init_module.c	/^void	init_pcap_fp()$/;"	f
init_pcap_fp	src/init/init_module.c	/^void	init_pcap_fp();$/;"	p	file:
init_queue_array	src/init/init_module.c	/^static void init_queue_array( struct _interface_queue *queue_array, int if_num )$/;"	f	file:	signature:( struct _interface_queue *queue_array, int if_num )
init_queue_array	src/init/init_module.c	/^static void init_queue_array( struct _interface_queue *queue_array, int if_num );$/;"	p	file:	signature:( struct _interface_queue *queue_array, int if_num )
init_sys_sampled_param	src/init/init_module.c	/^static void init_sys_sampled_param( struct _sys_sampled_param *sampled_struct, int num )$/;"	f	file:	signature:( struct _sys_sampled_param *sampled_struct, int num )
init_sys_sampled_param	src/init/init_module.c	/^static void init_sys_sampled_param( struct _sys_sampled_param *sampled_struct, int num );$/;"	p	file:	signature:( struct _sys_sampled_param *sampled_struct, int num )
init_tc_sys_list	src/init/init_module.c	/^static void	init_tc_sys_list()$/;"	f	file:
init_tc_sys_list	src/init/init_module.c	/^static void	init_tc_sys_list();$/;"	p	file:
interface_info_func	src/main.c	/^void	*interface_info_func( void *arg )$/;"	f	signature:( void *arg )
interface_info_func	src/main.c	/^void	*interface_info_func( void *arg );$/;"	p	file:	signature:( void *arg )
interface_pacp_handle	include/interface.h	/^pcap_t *interface_pacp_handle[MAX_INTERFACE_SIZE];$/;"	v
interface_sampled_struct	include/interface.h	/^struct _sampled_struct		interface_sampled_struct[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_sampled_struct
interval	include/interface.h	/^	int	interval;			\/\/间隔时间$/;"	m	struct:_interface_struct	access:public
interval	include/public.h	/^	int			interval;$/;"	m	struct:_tc_config_struct	access:public
interval_time	include/interface.h	/^	int	interval_time;		\/\/间隔时间$/;"	m	struct:_sampled_struct	access:public
interval_time	include/interface.h	/^	int	interval_time;$/;"	m	struct:_sys_sampled_param	access:public
ip6_dst	include/ip_list.h	/^	struct in6_addr ip6_dst;$/;"	m	struct:_ipv6_flow	typeref:struct:_ipv6_flow::in6_addr	access:public
ip6_src	include/ip_list.h	/^	struct in6_addr ip6_src;$/;"	m	struct:_ipv6_flow	typeref:struct:_ipv6_flow::in6_addr	access:public
ip_dst	include/ip_list.h	/^	struct in_addr ip_dst;$/;"	m	struct:_ipv4_flow	typeref:struct:_ipv4_flow::in_addr	access:public
ip_src	include/ip_list.h	/^	struct in_addr ip_src;	$/;"	m	struct:_ipv4_flow	typeref:struct:_ipv4_flow::in_addr	access:public
ip_v	include/ip_list.h	/^	__u32	ip_v:4;$/;"	m	struct:_ipv4_struct	access:public
ip_v	include/ip_list.h	/^	__u32	ip_v:4;$/;"	m	struct:_ipv6_struct	access:public
ip_v	include/ip_list.h	/^	unsigned int	ip_v;$/;"	m	struct:_ip_func	access:public
ipv4_add	src/init/init_module.c	/^int     ipv4_add( char *flow, int if_index )$/;"	f	signature:( char *flow, int if_index )
ipv4_add	src/init/init_module.c	/^int     ipv4_add( char *flow, int if_index );$/;"	p	file:	signature:( char *flow, int if_index )
ipv4_addr	include/interface.h	/^	char    ipv4_addr[INET6_ADDRSTRLEN];$/;"	m	struct:_interface_info	access:public
ipv4_broad_addr	include/interface.h	/^	char    ipv4_broad_addr[INET6_ADDRSTRLEN];$/;"	m	struct:_interface_info	access:public
ipv4_delete	src/init/init_module.c	/^int     ipv4_delete( struct list_head *p )$/;"	f	signature:( struct list_head *p )
ipv4_delete	src/init/init_module.c	/^int     ipv4_delete( struct list_head *p );$/;"	p	file:	signature:( struct list_head *p )
ipv4_flow	include/ip_list.h	/^struct _ipv4_flow ipv4_flow[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_ipv4_flow
ipv4_head_in	include/ip_list.h	/^struct _tc_sys_list	ipv4_head_in[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_tc_sys_list
ipv4_head_out	include/ip_list.h	/^struct _tc_sys_list	ipv4_head_out[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_tc_sys_list
ipv4_netmask	include/interface.h	/^	char    ipv4_netmask[INET6_ADDRSTRLEN];	$/;"	m	struct:_interface_info	access:public
ipv4_operate	src/init/init_module.c	/^char	*ipv4_operate( const u_char *packet, int if_index )$/;"	f	signature:( const u_char *packet, int if_index )
ipv4_operate	src/init/init_module.c	/^char	*ipv4_operate( const u_char *packet, int if_index );$/;"	p	file:	signature:( const u_char *packet, int if_index )
ipv4_policy_compare	src/policy/policy.c	/^int	ipv4_policy_compare( char *compared_ipv4_struct, char *current_ipv4_flow_struct )$/;"	f	signature:( char *compared_ipv4_struct, char *current_ipv4_flow_struct )
ipv4_print_data	src/init/init_module.c	/^int	ipv4_print_data( const char *flow )$/;"	f	signature:( const char *flow )
ipv4_print_data	src/init/init_module.c	/^int	ipv4_print_data( const char *flow );$/;"	p	file:	signature:( const char *flow )
ipv4_search	src/init/init_module.c	/^struct list_head*       ipv4_search( char *flow, int if_index )$/;"	f	signature:( char *flow, int if_index )
ipv4_search	src/init/init_module.c	/^struct list_head*       ipv4_search( char *flow, int if_index );$/;"	p	file:	signature:( char *flow, int if_index )
ipv4_update	src/init/init_module.c	/^int     ipv4_update( struct list_head *p, char *flow )$/;"	f	signature:( struct list_head *p, char *flow )
ipv4_update	src/init/init_module.c	/^int     ipv4_update( struct list_head *p, char *flow );$/;"	p	file:	signature:( struct list_head *p, char *flow )
ipv6_add	src/init/init_module.c	/^int     ipv6_add( char *flow, int if_index )$/;"	f	signature:( char *flow, int if_index )
ipv6_add	src/init/init_module.c	/^int     ipv6_add( char *flow, int if_index );$/;"	p	file:	signature:( char *flow, int if_index )
ipv6_addr	include/interface.h	/^	char    ipv6_addr[512];$/;"	m	struct:_interface_info	access:public
ipv6_addr_netmask	include/interface.h	/^	int    ipv6_addr_netmask;$/;"	m	struct:_interface_info	access:public
ipv6_delete	src/init/init_module.c	/^int     ipv6_delete( struct list_head *p )$/;"	f	signature:( struct list_head *p )
ipv6_delete	src/init/init_module.c	/^int     ipv6_delete( struct list_head *p );$/;"	p	file:	signature:( struct list_head *p )
ipv6_flow	include/ip_list.h	/^struct _ipv6_flow ipv6_flow;$/;"	v	typeref:struct:_ipv6_flow
ipv6_head	include/ip_list.h	/^struct _tc_sys_list	ipv6_head[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_tc_sys_list
ipv6_operate	src/init/init_module.c	/^char	*ipv6_operate( const u_char *packet, int if_index )$/;"	f	signature:( const u_char *packet, int if_index )
ipv6_operate	src/init/init_module.c	/^char	*ipv6_operate( const u_char *packet, int if_index );$/;"	p	file:	signature:( const u_char *packet, int if_index )
ipv6_policy_compare	src/policy/policy.c	/^int	ipv6_policy_compare( char *compared_ipv6_struct, char *current_ipv6_flow_struct )$/;"	f	signature:( char *compared_ipv6_struct, char *current_ipv6_flow_struct )
ipv6_print_data	src/init/init_module.c	/^int	ipv6_print_data( const char *flow )$/;"	f	signature:( const char *flow )
ipv6_print_data	src/init/init_module.c	/^int	ipv6_print_data( const char *flow );$/;"	p	file:	signature:( const char *flow )
ipv6_search	src/init/init_module.c	/^struct list_head*	ipv6_search( char *flow, int if_index )$/;"	f	signature:( char *flow, int if_index )
ipv6_search	src/init/init_module.c	/^struct list_head*	ipv6_search( char *flow, int if_index );$/;"	p	file:	signature:( char *flow, int if_index )
ipv6_update	src/init/init_module.c	/^int     ipv6_update( struct list_head *p, char *flow )$/;"	f	signature:( struct list_head *p, char *flow )
ipv6_update	src/init/init_module.c	/^int     ipv6_update( struct list_head *p, char *flow );$/;"	p	file:	signature:( struct list_head *p, char *flow )
isQueueEmpty	include/queue.h	/^ int isQueueEmpty( MyQueue *p );$/;"	p	signature:( MyQueue *p )
isQueueEmpty	src/util/queue.c	/^int isQueueEmpty( MyQueue *p )$/;"	f	signature:( MyQueue *p )
isQueueFull	include/queue.h	/^ int isQueueFull( MyQueue *p );$/;"	p	signature:( MyQueue *p )
isQueueFull	src/util/queue.c	/^int isQueueFull( MyQueue *p )$/;"	f	signature:( MyQueue *p )
isQueueInit	include/queue.h	/^ int isQueueInit( MyQueue *queue );$/;"	p	signature:( MyQueue *queue )
isQueueInit	src/util/queue.c	/^int isQueueInit( MyQueue *queue )$/;"	f	signature:( MyQueue *queue )
length	include/interface.h	/^	int	length;		\/\/队列当前长度$/;"	m	struct:_element_struct	access:public
length	include/queue.h	/^	int	length;		\/\/当前队列长度$/;"	m	struct:_my_queue	access:public
list_add	include/list.h	/^static void list_add(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_add_tail	include/list.h	/^static void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_del	include/list.h	/^static void list_del(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_del_init	include/list.h	/^static void list_del_init(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_empty	include/list.h	/^static int list_empty(struct list_head *head)$/;"	f	signature:(struct list_head *head)
list_entry	include/list.h	145;"	d
list_for_each	include/list.h	153;"	d
list_head	include/list.h	/^struct list_head {$/;"	s
list_head::next	include/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
list_head::prev	include/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
list_splice	include/list.h	/^static void list_splice(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
local_free_module	src/destory/destory.c	/^void	local_free_module()$/;"	f
main	src/main.c	/^void	main()$/;"	f
maxsize	include/interface.h	/^	int	maxsize;	\/\/队列最大长度$/;"	m	struct:_element_struct	access:public
maxsize	include/queue.h	/^	int	maxsize;	\/\/循环队列最大长度$/;"	m	struct:_my_queue	access:public
mutex	include/my_pthread.h	/^pthread_mutex_t mutex;$/;"	v
mutex	include/public.h	/^pthread_mutex_t mutex;$/;"	v
mutex	include/queue.h	/^	pthread_mutex_t	mutex;$/;"	m	struct:_my_queue	access:public
mutex_pro	include/my_pthread.h	/^pthread_mutex_t mutex_pro;$/;"	v
mutex_pro	include/public.h	/^pthread_mutex_t mutex_pro;$/;"	v
name	include/interface.h	/^	char    name[50];		\/\/网卡名称$/;"	m	struct:_interface_struct	access:public
name	include/interface.h	/^	char    name[50];$/;"	m	struct:_interface_info	access:public
next	include/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
nmax	include/public.h	/^	int			nmax;$/;"	m	struct:_tc_config_struct	access:public
node	include/interface.h	/^	struct _ipv4_struct node[MAX_FLOW_NUM];$/;"	m	struct:_element_struct	typeref:struct:_element_struct::_ipv4_struct	access:public
node	include/ip_list.h	/^	struct list_head	node;$/;"	m	struct:_ipv4_struct	typeref:struct:_ipv4_struct::list_head	access:public
node	include/ip_list.h	/^	struct list_head	node;$/;"	m	struct:_ipv6_struct	typeref:struct:_ipv6_struct::list_head	access:public
node_head	include/ip_list.h	/^	struct list_head	node_head;	\/\/list head position$/;"	m	struct:_tc_sys_list	typeref:struct:_tc_sys_list::list_head	access:public
one_interface_operate_flow_info_buff	src/analysis/statistics.c	/^static void one_interface_operate_flow_info_buff( int if_index )$/;"	f	file:	signature:( int if_index )
one_interface_operate_flow_info_buff	src/analysis/statistics.c	/^static void one_interface_operate_flow_info_buff( int if_index );$/;"	p	file:	signature:( int if_index )
one_interface_pack_flow_info_xml_buff	src/analysis/statistics.c	/^int one_interface_pack_flow_info_xml_buff( __u8 **xmlbuff, int *len, int if_index );$/;"	p	file:	signature:( __u8 **xmlbuff, int *len, int if_index )
one_interface_pack_flow_info_xml_buff	src/xml/xml.c	/^int one_interface_pack_flow_info_xml_buff( __u8 **xmlbuff, int *len, int if_index )$/;"	f	signature:( __u8 **xmlbuff, int *len, int if_index )
one_interface_pack_flow_info_xml_buff	src/xml/xml.c	/^int one_interface_pack_flow_info_xml_buff( __u8 **xmlbuff, int *len, int if_index );$/;"	p	file:	signature:( __u8 **xmlbuff, int *len, int if_index )
one_interface_statistics_module	src/analysis/statistics.c	/^void	one_interface_statistics_module( int if_index )$/;"	f	signature:( int if_index )
one_interface_traverse_sys_link	src/analysis/statistics.c	/^static void one_interface_traverse_sys_link( int if_index )$/;"	f	file:	signature:( int if_index )
one_interface_traverse_sys_link	src/analysis/statistics.c	/^static void one_interface_traverse_sys_link( int if_index );$/;"	p	file:	signature:( int if_index )
op_interface_info	src/xml/xml.c	/^int	op_interface_info( int if_index, xmlNodePtr node )$/;"	f	signature:( int if_index, xmlNodePtr node )
op_interface_link_info	src/xml/xml.c	/^int	op_interface_link_info( int if_index, xmlNodePtr node )$/;"	f	signature:( int if_index, xmlNodePtr node )
op_interface_struct	src/xml/xml.c	/^int	op_interface_struct( int if_index, xmlNodePtr node )$/;"	f	signature:( int if_index, xmlNodePtr node )
open_socket	src/util/interface.c	/^int open_socket( int family )$/;"	f	signature:( int family )
operate	include/ip_list.h	/^	char *(*operate)( const u_char *packet, int if_index );$/;"	m	struct:_ip_func	access:public
operate_flow_info_buff	src/analysis/statistics.c	/^static void operate_flow_info_buff()$/;"	f	file:
operate_flow_info_buff	src/analysis/statistics.c	/^static void operate_flow_info_buff();$/;"	p	file:
operate_link_info_buff	src/analysis/statistics.c	/^static void operate_link_info_buff()$/;"	f	file:
operate_link_info_buff	src/analysis/statistics.c	/^static void operate_link_info_buff();$/;"	p	file:
out_sampled_rate	include/interface.h	/^	float	out_sampled_rate;	\/\/抽样率$/;"	m	struct:_sampled_struct	access:public
out_sampled_rate	include/interface.h	/^	int	out_sampled_rate;$/;"	m	struct:_sys_sampled_param	access:public
p	include/public.h	/^	double			p;$/;"	m	struct:_tc_config_struct	access:public
pack_flow_info_xml_buff	src/xml/xml.c	/^int pack_flow_info_xml_buff( __u8 **xmlbuff, int *len )$/;"	f	signature:( __u8 **xmlbuff, int *len )
pack_interface_info_xml_buff	src/xml/xml.c	/^int pack_interface_info_xml_buff( __u8 **xmlbuff, int *len, int size )$/;"	f	signature:( __u8 **xmlbuff, int *len, int size )
pack_link_traffic_xml_buff	src/xml/xml.c	/^int pack_link_traffic_xml_buff( __u8 **xmlbuff, int *len )$/;"	f	signature:( __u8 **xmlbuff, int *len )
packet_send_buff	src/comm/comm.c	/^int	packet_send_buff( __u8 *xmlbuff, int len, char *buff, int bufflen, int flag )$/;"	f	signature:( __u8 *xmlbuff, int len, char *buff, int bufflen, int flag )
packet_xml_flow_info	src/xml/xml.c	/^int	packet_xml_flow_info( xmlNodePtr node, char *flow, float sampled_rate, int send_flag )$/;"	f	signature:( xmlNodePtr node, char *flow, float sampled_rate, int send_flag )
packet_xml_flow_info	src/xml/xml.c	/^int	packet_xml_flow_info( xmlNodePtr node, char *flow, float sampled_rate, int send_flag );$/;"	p	file:	signature:( xmlNodePtr node, char *flow, float sampled_rate, int send_flag )
packet_xml_interface	src/xml/xml.c	/^xmlNodePtr packet_xml_interface( xmlNodePtr node, int if_index )$/;"	f	signature:( xmlNodePtr node, int if_index )
packet_xml_interface	src/xml/xml.c	/^xmlNodePtr packet_xml_interface( xmlNodePtr node, int if_index );$/;"	p	file:	signature:( xmlNodePtr node, int if_index )
padding	include/packet.h	/^	__u32 padding;$/;"	m	struct:_cpi_header	access:public
padding1	include/packet.h	/^	__u32 padding1;$/;"	m	struct:_cpi_header	access:public
padding2	include/packet.h	/^	__u32 padding2;$/;"	m	struct:_cpi_header	access:public
pkg_len	include/packet.h	/^	__u32 pkg_len;$/;"	m	struct:_cpi_header	access:public
pkg_type	include/packet.h	/^	__u8 pkg_type;$/;"	m	struct:_cpi_header	access:public
pkg_version	include/packet.h	/^	__u8 pkg_version;$/;"	m	struct:_cpi_header	access:public
pma_addr	include/public.h	/^	struct sockaddr_storage	pma_addr;$/;"	m	struct:_tc_config_struct	typeref:struct:_tc_config_struct::sockaddr_storage	access:public
pma_port	include/public.h	/^	int			pma_port;	$/;"	m	struct:_tc_config_struct	access:public
port_dst	include/ip_list.h	/^	__u16 port_dst;$/;"	m	struct:_ipv4_flow	access:public
port_src	include/ip_list.h	/^	__u16 port_src;$/;"	m	struct:_ipv4_flow	access:public
prev	include/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
print_all_interfaces	src/util/util.c	/^void	print_all_interfaces( struct _interface_struct *if_array )$/;"	f	signature:( struct _interface_struct *if_array )
print_data	include/ip_list.h	/^	int (*print_data)( const char *flow );$/;"	m	struct:_ip_func	access:public
print_interface_sampled_param	src/init/init_module.c	/^static void print_interface_sampled_param( struct _interface_sampled_param *if_sampled_array, int interface_num )$/;"	f	file:	signature:( struct _interface_sampled_param *if_sampled_array, int interface_num )
print_interface_sampled_param	src/init/init_module.c	/^static void print_interface_sampled_param( struct _interface_sampled_param *if_sampled_array, int interface_num );$/;"	p	file:	signature:( struct _interface_sampled_param *if_sampled_array, int interface_num )
print_interface_sampled_struct	src/init/init_module.c	/^static void print_interface_sampled_struct( struct _sampled_struct *sampled_struct, int if_num )$/;"	f	file:	signature:( struct _sampled_struct *sampled_struct, int if_num )
print_interface_sampled_struct	src/init/init_module.c	/^static void print_interface_sampled_struct( struct _sampled_struct *sampled_struct, int if_num );$/;"	p	file:	signature:( struct _sampled_struct *sampled_struct, int if_num )
print_interfaces_info	src/util/interface.c	/^int	print_interfaces_info( int size, struct _interface_info *ife )$/;"	f	signature:( int size, struct _interface_info *ife )
print_mac	src/util/interface.c	/^int print_mac( struct _interface_info *ife )$/;"	f	signature:( struct _interface_info *ife )
print_sys_sampled_param	src/init/init_module.c	/^static void print_sys_sampled_param( struct _sys_sampled_param *sampled_struct, int num )$/;"	f	file:	signature:( struct _sys_sampled_param *sampled_struct, int num )
print_sys_sampled_param	src/init/init_module.c	/^static void print_sys_sampled_param( struct _sys_sampled_param *sampled_struct, int num );$/;"	p	file:	signature:( struct _sys_sampled_param *sampled_struct, int num )
producer_notify_consumer	include/my_pthread.h	/^void    producer_notify_consumer( int num );$/;"	p	signature:( int num )
producer_notify_consumer	src/pthread/pthread_cond_wait.c	/^void	producer_notify_consumer( int num )$/;"	f	signature:( int num )
producer_wait	include/my_pthread.h	/^void    producer_wait();$/;"	p	signature:()
producer_wait	src/pthread/pthread_cond_wait.c	/^void	producer_wait()$/;"	f
queue	include/interface.h	/^	MyQueue	*queue;$/;"	m	struct:_interface_queue	access:public
queue	include/queue.h	/^	char	*queue;		\/\/队列存储空间$/;"	m	struct:_my_queue	access:public
queue_array	include/interface.h	/^struct _interface_queue queue_array[MAX_INTERFACE_SIZE];$/;"	v	typeref:struct:_interface_queue
read_hostconfig_file	src/util/util.c	/^int read_hostconfig_file( char *filename )$/;"	f	signature:( char *filename )
rear	include/queue.h	/^	int	rear;		\/\/队列尾 - rear实际上存放的是字符数组的下标$/;"	m	struct:_my_queue	access:public
regression_analysis	src/analysis/analysis.c	/^int	regression_analysis( MyQueue *queue, TYPE sum_x, TYPE sum_y )$/;"	f	signature:( MyQueue *queue, TYPE sum_x, TYPE sum_y )
regression_analysis	src/analysis/analysis.c	/^int	regression_analysis( MyQueue *queue, TYPE sum_x, TYPE sum_y );$/;"	p	file:	signature:( MyQueue *queue, TYPE sum_x, TYPE sum_y )
router_id	include/public.h	/^	int			router_id;$/;"	m	struct:_tc_config_struct	access:public
rx_bytes	include/interface.h	/^	unsigned long rx_bytes;$/;"	m	struct:_interface_info	access:public
sampled_index	include/interface.h	/^	int	sampled_index;		\/\/对应抽样参数数组中的数组下标$/;"	m	struct:_sampled_struct	access:public
sampled_packets	include/interface.h	/^	int	sampled_packets;	\/\/抽样时间内抽样的包个数$/;"	m	struct:_sampled_struct	access:public
search	include/ip_list.h	/^	struct list_head*	(*search)( char *flow, int if_index );$/;"	m	struct:_ip_func	typeref:struct:_ip_func::search	access:public
send_data	src/comm/comm.c	/^int	send_data( __u8 *xmlbuff, int len, int flag )$/;"	f	signature:( __u8 *xmlbuff, int len, int flag )
send_interface_info	src/analysis/statistics.c	/^int	send_interface_info( int size )$/;"	f	signature:( int size )
set_sock_family	src/util/util.c	/^int set_sock_family( struct sockaddr *addr, int family )$/;"	f	signature:( struct sockaddr *addr, int family )
set_sock_port	src/util/util.c	/^int set_sock_port( struct sockaddr *addr, int port )$/;"	f	signature:( struct sockaddr *addr, int port )
start	include/ip_list.h	/^	struct timeval start;$/;"	m	struct:_ipv4_struct	typeref:struct:_ipv4_struct::timeval	access:public
statistics_module	src/analysis/statistics.c	/^void	statistics_module()$/;"	f
str_to_addr	src/util/util.c	/^int str_to_addr( __u8 *data, struct sockaddr *addr )$/;"	f	signature:( __u8 *data, struct sockaddr *addr )
sum_x	include/interface.h	/^	TYPE	sum_x;$/;"	m	struct:_interface_queue	access:public
sum_y	include/interface.h	/^	TYPE	sum_y;$/;"	m	struct:_interface_queue	access:public
sys_sampled_param	include/interface.h	/^	struct _sys_sampled_param	sys_sampled_param[PARAM_LEN];$/;"	m	struct:_interface_sampled_param	typeref:struct:_interface_sampled_param::_sys_sampled_param	access:public
system_best_sampled_n	include/public.h	/^double system_best_sampled_n;$/;"	v
tail	include/interface.h	/^	int	tail;		\/\/队列尾$/;"	m	struct:_element_struct	access:public
tc_netlink_open	include/util.h	/^int tc_netlink_open( int *nl_sequence_number );$/;"	p	signature:( int *nl_sequence_number )
tc_netlink_open	src/util/util.c	/^int tc_netlink_open( int *nl_sequence_number )$/;"	f	signature:( int *nl_sequence_number )
test_free	src/init/init_module.c	/^void test_free()$/;"	f
this_ether_header	include/packet.h	/^struct this_ether_header$/;"	s
this_ether_header::ether_dhost	include/packet.h	/^    u_int8_t ether_dhost[6];$/;"	m	struct:this_ether_header	access:public
this_ether_header::ether_shost	include/packet.h	/^    u_int8_t ether_shost[6];$/;"	m	struct:this_ether_header	access:public
this_ether_header::ether_type	include/packet.h	/^    u_int16_t ether_type;$/;"	m	struct:this_ether_header	access:public
thread_statistics_operation	src/main.c	/^void	*thread_statistics_operation();$/;"	p	file:
thread_statistics_operation	src/main.c	/^void *thread_statistics_operation()$/;"	f
total_packets	include/interface.h	/^	int	total_packets;		\/\/抽样时间内总的包个数$/;"	m	struct:_sampled_struct	access:public
total_send	include/ip_list.h	/^	__u32	total_send;$/;"	m	struct:_ipv4_flow	access:public
total_send	include/ip_list.h	/^	__u32	total_send;$/;"	m	struct:_ipv6_flow	access:public
total_send_rate	include/interface.h	/^	int	total_send_rate;	\/\/总的发送速率$/;"	m	struct:_sampled_struct	access:public
traffic_thrd	src/main.c	/^pthread_t       traffic_thrd[MAX_INTERFACE_SIZE];$/;"	v
traverse_sys_link	src/analysis/statistics.c	/^static void traverse_sys_link()$/;"	f	file:
tx_bytes	include/interface.h	/^	unsigned long tx_bytes;$/;"	m	struct:_interface_info	access:public
typesize	include/queue.h	/^	int	typesize;	\/\/某种数据类型长度$/;"	m	struct:_my_queue	access:public
update	include/ip_list.h	/^	int	(*update)( struct list_head *p, char *flow );$/;"	m	struct:_ip_func	access:public
used	include/ip_list.h	/^	__u32	used:1;$/;"	m	struct:_ipv4_struct	access:public
used	include/ip_list.h	/^	__u32	used:1;$/;"	m	struct:_ipv6_struct	access:public
value	include/my_pthread.h	/^int     value;$/;"	v
wakeup	include/my_pthread.h	/^int     wakeup;$/;"	v
